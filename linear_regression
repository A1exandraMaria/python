import numpy as np
import matplotlib.pyplot as plt

# Data
X = np.array([1, 2, 3])  # Independent variables
y = np.array([2, 3, 5])  # Dependent variables

# To use NumPy to compute a and b, we need to add a column of ones to X to account for the intercept term (b)
X_b = np.c_[np.ones((3, 1)), X]  # Add a column of ones

# Calculating the best parameters using the normal equation
theta_best = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)

# Coefficients
b = theta_best[0]  # Intercept
a = theta_best[1]  # Slope

# Displaying the results
print(f"The equation of the best-fit line is: y = {a}x + {b}")

# Using the computed parameters to predict y
X_new = np.array([[0], [3]])  # Range of X from 0 to 3
X_new_b = np.c_[np.ones((2, 1)), X_new]  # Add a column of ones
y_predict = X_new_b.dot(theta_best)

# Plotting
plt.plot(X_new, y_predict, "r-", linewidth=2, label="Predictions")
plt.plot(X, y, "b.", markersize=10, label="Data points")
plt.xlabel("$x_1$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.legend(loc="upper left", fontsize=14)
plt.axis([0, 4, 0, 6])
plt.grid(True)
plt.show()
